/*Q1. Implement a priority queue library (PriorityQ.h) of integers using a static implementation of the queue and implementing the below operation. Add an element with its priority into the queue*/

#include <stdio.h>
#include <stdlib.h>
#define MAX 10
int pqueue[MAX];
int front, rear;

void create_queue()
{
    front = rear = -1;
}

void check_priority(int data)
{
    int i, j;
    for (i = 0; i <= rear; i++)
    {
        if (data >= pqueue[i])
        {
            for (j = rear + 1; j > i; j--)
            {
                pqueue[j] = pqueue[j - 1];
            }
            pqueue[i] = data;
            return;
        }
    }
    pqueue[i] = data;
}

void insert_element(int data)
{
    if (rear >= MAX - 1)
    {
        printf("\nQUEUE OVERFLOW");
        return;
    }
    if ((front == -1) && (rear == -1))
    {
        front++;
        rear++;
        pqueue[rear] = data;
        return;
    }
    else
        check_priority(data);
    rear++;
}

void delete_element(int data)
{
    int i;
    if ((front == -1) && (rear == -1))
    {
        printf("\nEmpty Queue");
        return;
    }
    for (i = 0; i <= rear; i++)
    {
        if (data == pqueue[i])
        {
            for (; i < rear; i++)
            {
                pqueue[i] = pqueue[i + 1];
            }
            pqueue[i] = -99;
            rear--;
            if (rear == -1)
                front = -1;
            return;
        }
    }
    printf("\n%d element not found in queue", data);
}

void display_priorityqueue()
{
    if ((front == -1) && (rear == -1))
    {
        printf("\nEmpty Queue ");
        return;
    }
    for (; front <= rear; front++)
    {
        printf(" %d ", pqueue[front]);
    }
    front = 0;
}

void main()
{
    int n, choice;
    printf("\n1. Insert element by priority. 2. Delete element by priority. 3. Display priority queue. 4. Exit ");
    create_queue();
    while (1)
    {
        printf("\nEnter your choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("\nEnter element to insert : ");
            scanf("%d", &n);
            insert_element(n);
            break;
        case 2:
            printf("\nEnter element to delete : ");
            scanf("%d", &n);
            delete_element(n);
            break;
        case 3:
            display_priorityqueue();
            break;
        case 4:
            exit(0);
        default:
            printf("\n Please enter valid choice");
        }
    }
}


/*Q2. Read the data from file ‘sortedcities.txt’ containing sorted names of cities and their STD codes. Accept a name of the city from user and use binary search algorithm to check whether the name is present in the file and output the STD code, otherwise output “city not in the list”.*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct city
{
    char name[20];
    int code;
} rec;
rec city[100];

int readFile(rec *a)
{
    FILE *fp;
    int i = 0;
    fp = fopen("cities.txt", "r");
    while (!feof(fp))
    {
        fscanf(fp, "%s%d", a[i].name, &a[i].code);
        i++;
    }
    fclose(fp);
    return i;
}

void display(int n)
{
    int i;
    printf("\n");
    for (i = 0; i < n; i++)
    {
        printf("%s %d\n", city[i].name, city[i].code);
    }
}

void binarysearch(rec *a, int n)
{
    int low, high, middle;
    char key[20];
    printf("\nEnter city: ");
    scanf("%s", &key);
    low = 0;
    high = n - 1;
    while (low <= high)
    {
        middle = (low + high) / 2;
        if (strcmp(key, a[middle].name) == 0)
        {
            printf("\nSTD code:%d\n ", a[middle].code);
            break;
        }
        else if (strcmp(key, a[middle].name) < 0)
            high = middle - 1;
        else
            low = middle + 1;
    }
    if (high < low)
        printf("\ncity not in list\n");
}

void main()
{

    int i, n, choice;
    while (1)
    {
        printf("\n(1) Read file. (2) Display records. (3) Search city. (4) Exit.");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = readFile(city);
            break;
        case 2:
            display(n);
            break;
        case 3:
            binarysearch(city, n);
            break;
        case 4:
            exit(0);
        }
    }
}
