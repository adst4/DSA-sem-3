/*Q1. Implement a linear queue library (st_queue.h) of integers using a static implementation of the queue and implementing the init(Q), add(Q) and peek(Q) operations. Write a program that includes queue library and calls different queue operations */

#include <stdio.h>
#include <stdlib.h>
#define MAX 50
int f, r, Q[MAX], n;

void init()
{
    r = -1;
    f = -1;
    printf("\nEnter size of queue: ");
    scanf("%d", &n);
}

int isempty()
{
    if (f == r)
        return 1;
    else
        return 0;
}

int isfull()
{
    if (r == (n - 1))
        return 1;
    else
        return 0;
}

void add()
{
    int num;
    if (isfull())
    {
        printf("\n Queue is Full");
    }
    else
    {
        printf("\nEnter element: ");
        scanf("%d", &num);
        if (f == -1)
        {
            f = f + 1;
        }
        r++;
        Q[r] = num;
    }
}

int del()
{
    int no;
    if (isempty())
    {
        printf("\n Queue is Empty ");
    }
    else
    {
        no = Q[f];
        f++;
    }
    return no;
}

int rear()
{
    return (Q[r]);
}

int front()
{
    return (Q[f]);
}

void main()
{
    int i, ch;
    init();
    while (1)
    {
        printf("\n1. Push ie. insert into queue\n2. Pop ie.delete from queue\n3. Check queue is empty or not\n4. Check queue is full or not \n5. Front element\n6. Rear element\n7. Exit\n");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            add();
            break;
        case 2:
            printf("\nDeleted elements is : %d", del());
            break;
        case 3:
            i = isempty();
            if (i == 1)
                printf("\nQueue is empty");
            else
                printf("\nQueue is not empty");
            break;
        case 4:
            i = isfull();
            if (i == 1)
                printf("\nQueue is full");
            else
                printf("\nQueue is not full");
            break;
        case 5:
            printf("\nFront element of queue = %d ", front());
            break;
        case 6:
            printf("\nRear element of queue = %d ", rear());
            break;
        case 7:
            exit(0);
        }
    }
}


/*Q2. Read the data from the file “employee.txt” and sort on names in alphabetical order (use strcmp) using bubble sort or selection sort. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct employee
{
    int age;
    char name[10];
    float salary;
} record;
record employee[100];

int readFile(record *a)
{
    FILE *fp;
    int i = 0;
    fp = fopen("employee.txt", "r");
    while (!feof(fp))
    {
        fscanf(fp, "%d%s%f", &a[i].age, a[i].name, &a[i].salary);
        i++;
    }
    fclose(fp);
    return i;
}

void writeFile(record *a, int n)
{
    int i = 0;
    FILE *fp;
    fp = fopen("sortemployee.txt", "a+");
    if ((fp) != NULL)
    {
        for (i = 0; i < n; i++)
            fprintf(fp, "%d %s %.2f\n", a[i].age, a[i].name, a[i].salary);
    }
}

void display(record *a, int n)
{
    int i;
    printf("\n");
    for (i = 0; i < n; i++)
    {
        printf("%d %s %.2f\n", a[i].age, a[i].name, a[i].salary);
    }
}

void bubble_sort(record *emp, int n)
{
    int i, j;
    record t;
    for (i = 1; i < n; i++)
    {
        for (j = 0; j < n - i; j++)
        {
            if (strcmp(emp[j].name, emp[j + 1].name) >= 0)
            {
                t = emp[j];
                emp[j] = emp[j + 1];
                emp[j + 1] = t;
            }
        }
    }
    writeFile(emp, n);
}

void main()
{

    int i, n, choice;
    while (1)
    {
        printf("\n(1) Read file. (2) Display records. (3) Bubble Sort. (4) Exit");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = readFile(employee);
            break;
        case 2:
            display(employee, n);
            break;
        case 3:
            bubble_sort(employee, n);
            break;
        case 4:
            exit(0);
        }
    }
}
