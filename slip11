/*Q1. Accept n values in array from user. Accept a value x from user and use sentinel linear search algorithm to check whether the number is present in the array or not and output the position if the number is present. */

#include <stdio.h>
#define MAX 100

void display(int arr[], int n)
{
    int i;
    printf("\nArray is: ");
    for (i = 0; i < n; i++)
    {
        printf("\t%d", arr[i]);
    }
}

int input(int arr[])
{
    int i, n;
    printf("\nEnter n: ");
    scanf("%d", &n);
    printf("enter integers: ");
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);
    return n;
}

void linear_search(int arr[], int n)
{
    int i, x, flag;
    printf("\nEnter element to be searched: ");
    scanf("%d", &x);
    for (i = 0; i < n; i++)
    {
        if (arr[i] == x)
        {
            flag = 1;
            break;
        }
    }
    if (flag == 1)
        printf("Number found at location %d", i + 1);
    else
        printf("Number not found");
}

void main()
{
    int arr[MAX], n;
    int choice;
    while (1)
    {
        printf("\n(1) Create array. (2) Display array. (3) Linear Search. (4) Exit.");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = input(arr);
            break;
        case 2:
            display(arr, n);
            break;
        case 3:
            linear_search(arr, n);
            break;
        case 4:
            exit(0);
        }
    }
}


/*Q2. Implement a priority queue library (PriorityQ.h) of integers using a static implementation of the queue and implementing the below two operations. Write a driver program that includes queue library and calls different queue operations.
1) Add an element with its priority into the queue.
2) Delete an element from queue according to its priority.*/

#include <stdio.h>
#include <stdlib.h>
#define MAX 10
int pqueue[MAX];
int front, rear;
void create_queue()
{
    front = rear = -1;
}
void check_priority(int data)
{
    int i, j;
    for (i = 0; i <= rear; i++)
    {
        if (data >= pqueue[i])
        {
            for (j = rear + 1; j > i; j--)
            {
                pqueue[j] = pqueue[j - 1];
            }
            pqueue[i] = data;
            return;
        }
    }
    pqueue[i] = data;
}
void insert_element(int data)
{
    if (rear >= MAX - 1)
    {
        printf("\nQUEUE OVERFLOW");
        return;
    }
    if ((front == -1) && (rear == -1))
    {
        front++;
        rear++;
        pqueue[rear] = data;
        return;
    }
    else
        check_priority(data);
    rear++;
}

void delete_element(int data)
{
    int i;
    if ((front == -1) && (rear == -1))
    {
        printf("\nEmpty Queue");
        return;
    }
    for (i = 0; i <= rear; i++)
    {
        if (data == pqueue[i])
        {
            for (; i < rear; i++)
            {
                pqueue[i] = pqueue[i + 1];
            }
            pqueue[i] = -99;
            rear--;
            if (rear == -1)
                front = -1;
            return;
        }
    }
    printf("\n%d element not found in queue", data);
}
void display_priorityqueue()
{
    if ((front == -1) && (rear == -1))
    {
        printf("\nEmpty Queue ");
        return;
    }
    for (; front <= rear; front++)
    {
        printf(" %d ", pqueue[front]);
    }
    front = 0;
}
void main()
{
    int n, choice;
    create_queue();
    while (1)
    {
        printf("\n1. Insert element by priority. 2. Delete element by priority. 3. Display priority queue. 4. Exit ");
        printf("\nEnter your choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("\nEnter element to insert : ");
            scanf("%d", &n);
            insert_element(n);
            break;
        case 2:
            printf("\nEnter element to delete : ");
            scanf("%d", &n);
            delete_element(n);
            break;
        case 3:
            display_priorityqueue();
            break;
        case 4:
            exit(0);
        default:
            printf("\n Please enter valid choice");
        }
    }
}
