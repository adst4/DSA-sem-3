/*Q1. Implement a stack library (ststack.h) of integers using a static implementation of the stack and implementing the operations like init(S), S=push(S) and S=pop(S). Write a driver program that includes stack library and calls different stack operations. */

#include <stdio.h>
#include <stdlib.h>
#define MAX 50

int top, n;
int stack[MAX] = {};

void init()

{
    top = -1;
    printf("Enter size of the stack: ");
    scanf("%d", &n);
    printf("\nStatic Stack Initiaized\n");
}

void display_stack()
{
    int i = top;
    while (stack[i] != 0)
    {
        printf("\n|%d|", stack[i]);
        i = i - 1;
    }
}

void push()
{
    if (top == n - 1)
    {
        printf("\nStatic Stack is full\n");
    }
    else
    {
        top++;
        printf("Enter a element to be pushed: ");
        scanf("%d", &stack[top]);
    }
}

void pop()
{
    if (top == -1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("Poped value is: %d", stack[top]);
        top--;
    }
}

void peek()
{
    if (top == -1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("Element at top is:%d", stack[top]);
    }
}

void isempty()
{
    if (top == -1)
    {
        printf("\nStatic Stack is empty\n");
    }
    else
    {
        printf("\nStatic Stack is not empty\n");
    }
}

void isfull()
{
    if (top == n - 1)
    {
        printf("\nStatic Stack is full\n");
    }
    else
    {
        printf("\nStatic Stack is not full\n");
    }
}

int main()

{
    int choice;
    while (1)
    {
        printf("\n1.Init 2.Push 3.Display Stack 4.Pop 5.Peek 6.IsEmpty  7.IsFull 8.Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            init();
            break;
        case 2:
            push();
            break;
        case 3:
            display_stack();
            break;
        case 4:
            pop();
            break;
        case 5:
            peek();
            break;
        case 6:
            isempty();
            break;
        case 7:
            isfull();
            break;
        case 8:
            exit(0);
        }
    }
    return 0; 
}


/*Q2. Write a program that sorts the elements of linked list using bubble sort technique.*/

#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
} node;

int n = 0;

node *create_first_node()
{
    node *newnode;
    int element;
    newnode = (node *)malloc(sizeof(node *));
    printf("Enter element to be inserted in node: ");
    scanf("%d", &element);
    newnode->data = element;
    newnode->next = NULL;
    return newnode;
}

void display(node *start)
{
    node *temp = start;
    printf("\n");
    while (temp->next != NULL)
    {
        printf("|%d|%u|--->", temp->data, temp->next);
        temp = temp->next;
    }
    printf("|%d|%u|", temp->data, temp->next);
}

node *create_list()
{
    int i, element;
    node *newnode, *firstnode, *temp;
    printf("\nEnter number of nodes: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        if (i == 0)
        {
            temp = firstnode = create_first_node();
        }
        else
        {
            newnode = (node *)malloc(sizeof(node *));
            printf("Enter element to be inserted in node: ");
            scanf("%d", &element);
            newnode->data = element;
            newnode->next = NULL;
            temp->next = newnode;
            temp = newnode;
        }
    }
    return firstnode;
}

void bubbleSort(node *start)
{
    int swapped, i;
    node *ptr1;
    node *ptr2 = NULL;

    if (start == NULL)
        return;
    do
    {
        swapped = 0;
        ptr1 = start;
        while (ptr1->next != ptr2)
        {
            if (ptr1->data > ptr1->next->data)
            {
                swap(ptr1, ptr1->next);
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        ptr2 = ptr1;
    } while (swapped);
    printf("\nList is sorted!\n");
}

void swap(node *a, node *b)
{
    int temp = a->data;
    a->data = b->data;
    b->data = temp;
}

void main()
{
    int choice;
    node *list;
    while (1)
    {
        printf("\n1.Create List\n2.Display list\n3.Sort list\n4.Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            list = create_list();
            break;
        case 2:
            display(list);
            break;
        case 3:
            bubbleSort(list);
            break;
        case 4:
            exit(0);
        }
    }
}
