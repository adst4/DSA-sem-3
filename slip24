/*Q1. Implement a circular queue library (cir_queue.h) of integers using a static (linked list) implementation of the queue and implementing the operations like init (Q), AddQueue(Q, x) and X=peek (Q)). Write a menu driven program that includes queue library and calls different queue operations.*/

#include <stdio.h>
#include <stdlib.h>
#define size 5

int front = -1;
int rear = -1;

void insertq(int queue[], int item)
{
    if ((front == 0 && rear == size - 1) || (front == rear + 1))
    {
        printf("\nQueue is full");
        return;
    }
    else if (rear == -1)
    {
        rear++;
        front++;
    }
    else if (rear == size - 1 && front > 0)
    {
        rear = 0;
    }
    else
    {
        rear++;
    }
    queue[rear] = item;
}

void display(int queue[])
{
    int i;
    printf("\n");
    if (front > rear)
    {
        for (i = front; i < size; i++)
            printf("%d ", queue[i]);
        for (i = 0; i <= rear; i++)
            printf("%d ", queue[i]);
    }
    else
    {
        for (i = front; i <= rear; i++)
            printf("%d ", queue[i]);
    }
}

void deleteq(int queue[])
{
    if (front == -1)
    {
        printf("Queue is empty ");
    }
    else if (front == rear)
    {
        printf("\n %d deleted", queue[front]);
        front = -1;
        rear = -1;
    }
    else
    {
        printf("\n %d deleted", queue[front]);
        front++;
    }
}

int isEmpty()
{
    if (front == -1)
        return 1;
    else
        return 0;
}

int isFull()
{
    if ((front == 0 && rear == size - 1) || (front == rear + 1))
        return 1;
    else
        return 0;
}

int main()
{
    int n, ch;
    int queue[size];
    while (1)
    {
        printf("\n1. Insert \n2. Delete\n3. Display\n4. Is stack full\n5. Is stack empty\n6.Exit");
        printf("\nEnter your Choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("\nEnter number: ");
            scanf("%d", &n);
            insertq(queue, n);
            break;
        case 2:
            deleteq(queue);
            break;
        case 3:
            display(queue);
            break;
        case 4:
            if (isFull())
                printf("\nStack is Full");
            else
                printf("\nStack is not full");
            break;
        case 5:
            if (isEmpty())
                printf("\nStack is empty");
            else
                printf("\nStack is not empty");
            break;
        case 6:
            exit(0);
        }
    }
}



/*Q2. Read the data from the file “employee.txt” and sort on names in alphabetical order (use strcmp) using insertion sort or selection sort. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct employee
{
    int age;
    char name[10];
    float salary;
} record;
record employee[100];

int readFile(record *a)
{
    FILE *fp;
    int i = 0;
    fp = fopen("employee.txt", "r");
    while (!feof(fp))
    {
        fscanf(fp, "%d%s%f", &a[i].age, a[i].name, &a[i].salary);
        i++;
    }
    fclose(fp);
    return i;
}

void writeFile(record *a, int n)
{
    int i = 0;
    FILE *fp;
    if ((fp = fopen("sortemployee.txt", "a+")) != NULL)
    {
        for (i = 0; i < n; i++)
            fprintf(fp, "%d %s %.2f\n", a[i].age, a[i].name, a[i].salary);
    }
}

void display(record *a, int n)
{
    int i;
    printf("\n");
    for (i = 0; i < n; i++)
    {
        printf("%d %s %.2f\n", a[i].age, a[i].name, a[i].salary);
    }
}

void selection_sort(record *emp, int n)
{
    int i, j, min;
    record temp;
    for (i = 0; i < n - 1; i++)
    {
        min = i;
        for (j = i + 1; j < n; j++)
        {
            if ((strcmp(emp[j].name, emp[min].name) <= 0))
            {
                min = j;
            }
        }
        if (min != i)
        {
            temp = emp[i];
            emp[i] = emp[min];
            emp[min] = temp;
        }
    }
    writeFile(emp, n);
}

void main()
{

    int i, n, choice;
    while (1)
    {
        printf("\n(1) Read file. (2) Display records. (3) Selection Sort. (4) Exit");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = readFile(employee);
            break;
        case 2:
            display(employee, n);
            break;
        case 3:
            selection_sort(employee, n);
            break;
        case 4:
            exit(0);
        }
    }
}
