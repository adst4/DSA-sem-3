/*Q1. Sort a random array of n integers (accept the value of n from user) in ascending order by using quick sort algorithm.*/

#include <stdio.h>
#include <stdlib.h>
#define MAX 100

void display(int arr[], int n)
{
    int i;
    printf("\nArray is: ");
    for (i = 0; i < n; i++)
    {
        printf("\t%d", arr[i]);
    }
}

int generate(int arr[])
{
    int i, n;
    printf("\nEnter n: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
        arr[i] = rand() % 100;
    return n;
}

int partition(int array1[], int low, int up)
{
    int temp, i, j, pivot;
    i = low + 1;
    j = up;
    pivot = array1[low];
    while (i <= j)
    {
        while ((array1[i] < pivot) && (i < up))
        {
            i++;
        }
        while (array1[j] > pivot)
        {
            j--;
        }
        if (i < j)
        {
            temp = array1[i];
            array1[i] = array1[j];
            array1[j] = temp;
            i++;
            j--;
        }
        else
            i++;
    }
    array1[low] = array1[j];
    array1[j] = pivot;
    return j;
}

void quick_sort(int array1[], int low, int up)
{
    int pivloc;
    if (low >= up)
    {
        return;
    }
    pivloc = partition(array1, low, up);
    quick_sort(array1, low, pivloc - 1);
    quick_sort(array1, pivloc + 1, up);
}

void main()
{
    int arr[MAX], n;
    int choice;
    while (1)
    {
        printf("\n(1) Create random array. (2) Display array. (3) Quick Sort. (4) Exit.");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = generate(arr);
            break;
        case 2:
            display(arr, n);
            break;
        case 3:
            quick_sort(arr, 0, n - 1);
            break;
        case 4:
            exit(0);
        }
    }
}

/*Q2. Write a program that checks whether a string of characters is palindrome or not. The function should use a stack library (cststack.h) of stack of characters using a static implementation of the stack. */

#include <stdio.h>
#include <stdlib.h>
#define MAX 50

int top, n;
char stack[MAX] = {};

void init()
{
    top = -1;
}

void push(char ch)
{
    if (isfull())
        printf("stack is full");
    else
    {
        top++;
        stack[top] = ch;
    }
}

char pop()
{
    char ch;
    if (isempty())
        printf("stack is empty");
    else
    {
        ch = stack[top];
        top--;
        return ch;
    }
}

int isempty()
{
    if (top == -1)
        return 1;
    else
        return 0;
}

int isfull()
{
    if (top == (MAX - 1))
        return 1;
    else
        return 0;
}

void main()
{
    char str[20], s1[20], ch;
    int i, j = 0, choice;
    while (1)
    {
        printf("\n1. Enter string\n2. Check palindrome or not\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("\nEnter the string:");
            scanf("%s", &str);
            strcpy(s1, str);
            init();
            for (i = 0; str[i] != '\0'; i++)
            {
                push(str[i]);
            }
            break;
        case 2:
            while (!isempty())
            {
                ch = pop();
                str[j] = ch;
                j++;
            }

            str[j] = '\0';
            if (strcmp(s1, str) == 0)
                printf("\nGiven string is palindrome");
            else
                printf("\nGiven string is not palindrome");
            j = 0;
            break;
        case 3:
            exit(0);
        }
    }
}
