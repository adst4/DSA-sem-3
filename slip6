*Q1. Sort a random array of n integers (accept the value of n from user) in ascending order by using selection sort algorithm. */

#include <stdio.h>
#include <stdlib.h>
#define MAX 100

void display(int arr[], int n)
{
    int i;
    printf("\nArray is: ");
    for (i = 0; i < n; i++)
    {
        printf("\t%d", arr[i]);
    }
}

int generate(int arr[])
{
    int i, n;
    printf("\nEnter n: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
        arr[i] = rand() % 100;
    return n;
}

void selection_sort(int arr[], int n)
{
        int i, j, temp, min;
        for (i = 0; i < n; i++)
        {
                min = i;
                for (j = i + 1; j < n; j++)
                {
                        if (arr[j] < arr[min])
                                min = j;
                }
                if (min != i)
                {
                        temp = arr[i];
                        arr[i] = arr[min];
                        arr[min] = temp;
                }
        }
}

void main()
{
    int arr[MAX], n;
    int choice;
    while (1)
    {
        printf("\n(1) Create random array. (2) Display array. (3) Selection Sort. (4) Exit.");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = generate(arr);
            break;
        case 2:
            display(arr, n);
            break;
        case 3:
            selection_sort(arr, n);
            break;
        case 4:
            exit(0);
        }
    }
}


/*Q2. Implement a queue library (dyqueue.h) of integers using a dynamic (linked list) implementation of the queue and implement init, enqueue, dequeue, isempty, peek operations.*/

#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
} node;
node *front, *rear;

void init()
{
    front = NULL;
    rear = NULL;
}

void enqueue(int item)
{
    node *nptr = malloc(sizeof(struct node));
    nptr->data = item;
    nptr->next = NULL;
    if (rear == NULL)
    {
        front = nptr;
        rear = nptr;
    }
    else
    {
        rear->next = nptr;
        rear = rear->next;
    }
}

void display()
{
    node *temp;
    temp = front;
    printf("\n");
    while (temp != NULL)
    {
        printf("%d\t", temp->data);
        temp = temp->next;
    }
}

int isEmpty()
{
    if (front == rear)
        return 1;
    else
        return 0;
}

void dequeue()
{
    if (front == NULL)
    {
        printf("\n\nqueue is empty \n");
    }
    else
    {
        node *temp;
        temp = front;
        front = front->next;
        printf("\n\n%d deleted", temp->data);
        free(temp);
    }
}

void peek()
{
    printf("\nElement at front: %d", front->data);
}

void main()
{
    int n, ch;
    while (1)
    {
        printf("\n1. Init\n2. Insert into queue \n3. Delete from queue\n4. Display queue\n5. Isempty\n6. Peek\n7.Exit");
        printf("\nEnter Your Choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            init();
            break;
        case 2:
            printf("\nEnter number ");
            scanf("%d", &n);
            enqueue(n);
            break;
        case 3:
            dequeue();
            break;
        case 4:
            display();
            break;
        case 5:
            if (isEmpty())
                printf("\nQueue is empty");
            else
                printf("\nQueue is not empty");
            break;
        case 6:
            peek();
            break;
        case 7:
            exit(0);
        }
    }
}
