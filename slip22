/*Q1. Implement a linear queue library (st_queue.h) of integers using a static implementation of the queue and implementing the operations like init (Q), AddQueue(Q, x) and X=DeleteQueue(Q). Write a program that includes queue library and calls different queue operations.*/

#include <stdio.h>
#include <stdlib.h>
#define MAX 50
int f, r, n;

void init()
{
    r = -1;
    f = -1;
    printf("\nEnter size of queue: ");
    scanf("%d", &n);
}

int isempty()
{
    if (f == r)
        return 1;
    else
        return 0;
}

int isfull()
{
    if (r == (n - 1))
        return 1;
    else
        return 0;
}

void add(int Q[MAX], int num)
{
    if (isfull())
    {
        printf("\n Queue is Full");
    }
    else
    {
        if (f == -1)
        {
            f = f + 1;
        }
        r++;
        Q[r] = num;
    }
}

int del(int Q[MAX])
{
    int no;
    if (isempty())
    {
        printf("\n Queue is Empty ");
    }
    else
    {
        no = Q[f];
        f++;
    }
    return no;
}

int rear(int Q[MAX])
{
    return (Q[r]);
}

int front(int Q[MAX])
{
    return (Q[f]);
}

void main()
{
    int i, ch, element;
    int Q[MAX];
    init();
    while (1)
    {
        printf("\n1. Push ie. insert into queue\n2. Pop ie.delete from queue\n3. Check queue is empty or not\n4. Check queue is full or not \n5. Front element\n6. Rear element\n7. Exit\n");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("\nEnter element: ");
            scanf("%d", &element);
            add(Q, element);
            break;
        case 2:
            printf("\nDeleted elements is : %d", del(Q));
            break;
        case 3:
            i = isempty();
            if (i == 1)
                printf("\nQueue is empty");
            else
                printf("\nQueue is not empty");
            break;
        case 4:
            i = isfull();
            if (i == 1)
                printf("\nQueue is full");
            else
                printf("\nQueue is not full");
            break;
        case 5:
            printf("\nFront element of queue = %d ", front(Q));
            break;
        case 6:
            printf("\nRear element of queue = %d ", rear(Q));
            break;
        case 7:
            exit(0);
        }
    }
}


/*Q2. Read the data from file 'cities.txt' containing names of cities and their STD codes. Accept a name of the city from user and use sentinel linear search algorithm to check whether the name is present in the file and output the STD code, otherwise output “city not in the list”. */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct city
{
    char name[20];
    int code;
} rec;
rec city[100];

int readFile(rec *a)
{
    FILE *fp;
    int i = 0;
    fp = fopen("cities.txt", "r");
    while (!feof(fp))
    {
        fscanf(fp, "%s%d", a[i].name, &a[i].code);
        i++;
    }
    fclose(fp);
    return i;
}

void display(int n)
{
    int i;
    printf("\n");
    for (i = 0; i < n; i++)
    {
        printf("%s %d\n", city[i].name, city[i].code);
    }
}

void linearsearch(rec *a, int n)
{
    int i;
    char x[20];
    printf("\nEnter city to be searched: ");
    scanf("%s", &x);
    for (i = 0; i < n; i++)
    {
        if (strcmp(a[i].name, x) == 0)
        {
            printf("\nSTD Code\n%d\n", a[i].code);
            break;
        }
    }
}

void main()
{

    int i, n, choice;
    while (1)
    {
        printf("\n(1) Read file. (2) Display records. (3) Search city. (4) Exit.");
        printf("\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            n = readFile(city);
            break;
        case 2:
            display(n);
            break;
        case 3:
            linearsearch(city, n);
            break;
        case 4:
            exit(0);
        }
    }
}
